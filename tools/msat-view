#!/usr/bin/python3

# Copyright (C) 2010--2012  ARPA-SIM <urpsim@smr.arpa.emr.it>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# Author: Enrico Zini <enrico@enricozini.com>

# Tip: run with GTK_DEBUG=interactive to debug widget layout

from typing import Optional, Tuple
import math

VERSION = "0.3"


def start_app(args):
    # All the Gtk-dependent code is here to be able to print command-line help
    # even when the needed python modules are not installed
    import gdal
    import osr
    import gi
    from gi.repository import GObject
    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk
    from gi.repository import Gdk
    # from gi.repository import GdkPixbuf
    import cairo
    import numpy

    class ImagePosition:
        """
        Represent a position on the image, both in pixel and in georeferenced
        coordinates
        """
        def __init__(self, x: int, y: int, lat: float, lon: float):
            self.x = x
            self.y = y
            self.lat = lat
            self.lon = lon

    class ImageArea:
        """
        Represented a rectangle between two points on the image, both in pixel
        and in georeferenced coordinates
        """
        def __init__(self, pos1: ImagePosition, pos2: ImagePosition):
            self.pos1 = pos1
            self.pos2 = pos2

    class MapWidget(Gtk.DrawingArea):
        __gtype_name__ = "MapWidget"
        __gsignals__ = {
                "area-changed": (GObject.SignalFlags.RUN_FIRST, GObject.TYPE_NONE, (object,)),
                "position-changed": (GObject.SignalFlags.RUN_FIRST, GObject.TYPE_NONE, (object,)),
        }

        def __init__(self):
            super().__init__()
            self.add_events(Gdk.EventMask.POINTER_MOTION_MASK
                            | Gdk.EventMask.BUTTON_PRESS_MASK
                            | Gdk.EventMask.BUTTON_RELEASE_MASK)

            # GDAL dataset for the current image
            self.dataset = None
            # GDAL RasterBand currently displayed
            self.raster_band = None
            # Projection of the image currently displayed
            self.proj = osr.SpatialReference()
            # Coordinate transformation to georeference image points
            self.to_latlon = None
            # Geotransform matrix to georeference image points
            self.geotrans = None
            # Cached image
            self.cached_img: Optional[cairo.ImageSurface] = None
            # Pending timer for an image rescale
            self.refresh_timeout = None

            # Area of the current selection, in image coordinates
            self.selection: Optional[cairo.RectangleInt] = None
            # (x, y) of the initial point when drawing an area, in device coordinates
            self.selection_origin: Optional[Tuple[int, int]] = None
            # Aspect ratio of the current image
            self.aspect: float = 1.0
            # Rectangle with the area where the image has been drawn on the
            # device
            self.draw_area: Optional[cairo.RectangleInt] = None
            # Zoom area in image coordinates
            self.zoom: Optional[cairo.RectangleInt] = None

        def load(self, fname: str):
            """
            Load and display an image
            """
            self.dataset = gdal.Open(fname, gdal.GA_ReadOnly)
            self.raster_band = self.dataset.GetRasterBand(1)
            self.proj.SetFromUserInput(self.dataset.GetProjectionRef())
            proj_latlon = self.proj.CloneGeogCS()
            self.to_latlon = osr.CoordinateTransformation(self.proj, proj_latlon)
            self.geotrans = self.dataset.GetGeoTransform()
            self.cached_img = None
            self.aspect = self.raster_band.XSize / self.raster_band.YSize
            self.draw_area = None
            self.queue_draw()

        def do_draw(self, context):
            """
            Called by Gtk when the widget needs to redraw itself
            """
            allocation = self.get_allocation()

            width, height = self.enforce_aspect_ratio(allocation.width, allocation.height)
            self.draw_area = cairo.RectangleInt(x=0, y=0, width=width, height=height)
            try:
                context.save()
                # Uncomment to center the image
                # context.translate((allocation.width - width) / 2, (allocation.height - height) / 2)
                img = self.render_image(width, height)
                if img.get_width() != width or img.get_height() != height:
                    bigger = img.get_width() < width or img.get_height() < height
                    # Scale the context to fit the image to the widget
                    context.scale(width / img.get_width(), height / img.get_height())
                    if bigger:
                        # Only regenerate image if we need more resolution
                        self.schedule_refresh()

                context.set_source(cairo.SurfacePattern(img))
                context.rectangle(0, 0, img.get_width(), img.get_height())
                context.fill()
            finally:
                context.restore()

            # Draw selection rectangle
            if self.selection:
                x, y = self.to_pixel_coords(self.selection.x, self.selection.y)
                x1, y1 = self.to_pixel_coords(
                        self.selection.x + self.selection.width,
                        self.selection.y + self.selection.height)
                context.rectangle(x, y, x1 - x, y1 - y)
                context.set_line_width(1)
                context.stroke_preserve()
                context.set_source_rgba(1, 1, 1, 0.5)
                context.fill()

        def render_image(self, width, height):
            if self.cached_img:
                return self.cached_img

            if self.zoom:
                data = self.raster_band.ReadRaster(
                        self.zoom.x, self.zoom.y, self.zoom.width, self.zoom.height, width, height, gdal.GDT_Byte)
            else:
                data = self.raster_band.ReadRaster(
                        xoff=0, yoff=0,
                        xsize=self.raster_band.XSize, ysize=self.raster_band.YSize,
                        buf_xsize=width, buf_ysize=height,
                        buf_type=gdal.GDT_Byte)

            # Normalise image data
            # import time
            # start = time.perf_counter()
            if True:
                # Numpy version, faster
                stride = cairo.ImageSurface.format_stride_for_width(cairo.Format.RGB24, width)
                arr = numpy.fromiter(data, dtype=numpy.uint8).reshape((height, width))
                dmin = arr.min()
                dmax = arr.max()
                arr -= dmin
                numpy.multiply(arr, (255 / (dmax - dmin)), out=arr, casting="unsafe")
                arr = arr.repeat(4, axis=1)
                data = bytearray(arr.tobytes())
            else:
                stride = cairo.ImageSurface.format_stride_for_width(cairo.Format.RGB24, width)
                stride_pad = bytearray(stride - (width * 3))
                image_data = bytearray()
                dmin = min(data)
                dmax = max(data)
                scale = 255 / (dmax - dmin)
                data = memoryview(data)
                for row in range(height):
                    for d in data[row * width: (row + 1) * width]:
                        scaled = math.floor((d - dmin) * scale)
                        image_data.append(scaled)
                        image_data.append(scaled)
                        image_data.append(scaled)
                    image_data += stride_pad
                data = image_data
            # elapsed = time.perf_counter() - start
            # print("ELAPSED", elapsed)

            # print(f"min {dmin} → {min(data)}, max {dmax} → {max(data)}  [{width*height*3} {len(data)}]")

            self.cached_img = cairo.ImageSurface.create_for_data(data, cairo.Format.RGB24, width, height)
            return self.cached_img

        def enforce_aspect_ratio(self, w: int, h: int) -> Tuple[int, int]:
            """
            Take an arbitrary image size, and update it to match the current
            aspect ratio in self.aspect
            """
            nh = w / self.aspect
            nw = h * self.aspect
            if nh > h:
                w = nw
            elif nw > w:
                h = nh
            return round(w), round(h)

        def schedule_refresh(self):
            """
            Schedule a redraw without a cached image, after a timeout.

            This is used to trigger drawing a higher resolution of the current
            image, and to coalesce together multiple requests coming in a burst
            """
            if self.refresh_timeout:
                GObject.source_remove(self.refresh_timeout)
                self.refresh_timeout = None

            def refresh_image():
                self.cached_img = None
                self.queue_draw()
                return False

            self.refresh_timeout = GObject.timeout_add(1000, refresh_image)

        def do_get_request_mode(self):
            # Implement height-for-width spacing, using the image aspect ratio
            return Gtk.SizeRequestMode.HEIGHT_FOR_WIDTH

        def do_get_preferred_height_for_width(self, width):
            # Implement height-for-width spacing, using the image aspect ratio
            res = width / self.aspect
            return res

        def do_get_preferred_width_for_height(self, height):
            # Implement height-for-width spacing, using the image aspect ratio
            res = height * self.aspect
            return res

        def do_button_press_event(self, event):
            """
            When a button is pressed, start drawing an area
            """
            self.selection_origin = event.x, event.y
            x, y = self.to_image_coords(event.x, event.y)
            self.selection = cairo.RectangleInt(x=int(x), y=int(y), width=0, height=0)
            self.queue_draw()
            return False

        def do_button_release_event(self, event):
            if not self.selection:
                return False
            self.update_rect(event)
            self.queue_draw()
            return False

        def update_rect(self, event):
            ex = max(0, event.x)
            ey = max(0, event.y)
            imgx, imgy = self.to_image_coords(
                    min(self.selection_origin[0], ex),
                    min(self.selection_origin[1], ey))
            imgx1, imgy1 = self.to_image_coords(
                    max(self.selection_origin[0], ex),
                    max(self.selection_origin[1], ey))
            self.selection = cairo.RectangleInt(x=imgx, y=imgy, width=imgx1 - imgx, height=imgy1 - imgy)

            lat, lon = self.georeference(imgx, imgy)
            p1 = ImagePosition(imgx, imgy, lat, lon)
            lat, lon = self.georeference(imgx1, imgy1)
            p2 = ImagePosition(imgx1, imgy1, lat, lon)

            self.emit("area-changed", ImageArea(p1, p2))

        def to_image_coords(self, x: int, y: int) -> Tuple[int, int]:
            """
            Convert widget coordinates to image coordinates, keeping into
            account the current panning and zooming
            """
            if self.zoom:
                ix = self.zoom.x
                iy = self.zoom.y
                iw = self.zoom.width
                ih = self.zoom.height
            else:
                ix, iy = 0, 0
                iw = self.raster_band.XSize
                ih = self.raster_band.YSize
            imgx = round(ix + (x * iw / self.draw_area.width))
            imgy = round(iy + (y * ih / self.draw_area.height))
            if imgx >= self.raster_band.XSize:
                imgx = self.raster_band.XSize
            if imgy >= self.raster_band.YSize:
                imgy = self.raster_band.YSize
            return imgx, imgy

        def to_pixel_coords(self, x: int, y: int) -> Tuple[int, int]:
            """
            Convert image coordinates to widget coordinates, keeping into
            account the current panning and zooming
            """
            if self.zoom:
                ix = self.zoom.x
                iy = self.zoom.y
                iw = self.zoom.width
                ih = self.zoom.height
            else:
                ix, iy = 0, 0
                iw = self.raster_band.XSize
                ih = self.raster_band.YSize
            x = round((x - ix) * self.draw_area.width / iw)
            y = round((y - iy) * self.draw_area.height / ih)
            return x, y

        def do_motion_notify_event(self, event):
            # Extend rectangle if we are dragging
            if event.state & Gdk.ModifierType.BUTTON1_MASK:
                self.update_rect(event)
                self.queue_draw()

            # Convert to image pixels
            imgx, imgy = self.to_image_coords(event.x, event.y)
            lat, lon = self.georeference(imgx, imgy)
            # print(f"({imgx}, {imgy}) -> lat {lat} lon {lon}")
            self.emit("position-changed", ImagePosition(imgx, imgy, lat, lon))

            return False

        def georeference(self, x: int, y: int) -> Tuple[float, float]:
            """
            Georeference a point in image (not widget) coordinates
            """
            # Pixel coordinates to spaceview projected coordinates
            px = self.geotrans[0] + self.geotrans[1] * x + self.geotrans[2] * y
            py = self.geotrans[3] + self.geotrans[4] * x + self.geotrans[5] * y

            # Projected coordinates to latlon
            lon, lat = self.to_latlon.TransformPoint(px, py)[:2]
            return lat, lon

        def zoom_in(self, *args):
            """
            Zoom the image on the current selection
            """
            if not self.selection:
                return
            self.cached_img = None
            self.zoom = self.selection
            self.selection = None
            self.queue_draw()

        def zoom_out(self, *args):
            """
            Reset zoom
            """
            if not self.zoom:
                return
            self.cached_img = None
            self.zoom = None
            self.selection = None
            self.queue_draw()

    class ImageInfo(Gtk.Grid):
        def __init__(self):
            super().__init__()
            # n_rows=10, n_columns=2)
            self.attach(Gtk.Label(label="Position"), 0, 0, 2, 1)

            self.pos_pix = self.add_field("Pixels: ", 0, 1)
            self.pos_coord = self.add_field("Coords: ", 0, 2)

            self.attach(Gtk.Label(label="Area"), 0, 3, 2, 1)

            self.area_pix = self.add_field("Pixels: ", 0, 4)
            self.area_coord = self.add_field("Coords: ", 0, 5)
            self.area_msat_pix = self.add_field("msat pix: ", 0, 6)
            self.area_msat_coord = self.add_field("msat coord: ", 0, 7)

            self.area_gdal_pix = self.add_field("GDAL pix: ", 0, 8)
            self.area_gdal_coord = self.add_field("GDAL coord: ", 0, 9)

        def add_field(self, label: str, left: int, top: int):
            """
            Add a labeled field to the grid.

            Returns the label for the field
            """
            lbl = Gtk.Label(label=label)
            lbl.set_xalign(1.0)
            self.attach(lbl, left, top, 1, 1)
            field = Gtk.Label()
            field.set_xalign(0.0)
            field.set_selectable(True)
            field.set_hexpand(True)
            self.attach(field, left + 1, top, 1, 1)
            return field

        def fmtll(self, lat: float, lon: float):
            """
            Format a latitude, longitude pair
            """
            if abs(lat) > 90:
                slat = "--"
            else:
                slat = f"{lat:.4f}"
            if abs(lon) > 180:
                slon = "--"
            else:
                slon = f"{lon:.4f}"
            return f"{slat} {slon}"

        def on_position_changed(self, mapview: MapWidget, pos: ImagePosition):
            self.pos_pix.set_text("%d, %d" % (pos.x, pos.y))
            self.pos_coord.set_text(self.fmtll(pos.lat, pos.lon))

        def on_area_changed(self, mapview: MapWidget, a: ImageArea):
            self.area_pix.set_text(f"{a.pos1.x}, {a.pos1.y} to {a.pos2.x}, {a.pos2.y}")
            self.area_coord.set_text(
                    f"{self.fmtll(a.pos1.lat, a.pos1.lon)}\n{self.fmtll(a.pos2.lat, a.pos2.lon)}")
            latmin = min(a.pos1.lat, a.pos2.lat)
            latmax = max(a.pos1.lat, a.pos2.lat)
            lonmin = min(a.pos1.lon, a.pos2.lon)
            lonmax = max(a.pos1.lon, a.pos2.lon)
            self.area_msat_pix.set_text(
                    f"--area='{a.pos1.x},{a.pos2.x-a.pos1.x},{a.pos1.y},{a.pos2.y-a.pos1.y}'")
            self.area_msat_coord.set_text(f"--Area='{latmin:.4f} {latmax:.4f} {lonmin:.4f} {lonmax:.4f}")
            self.area_gdal_pix.set_text(
                    f"{a.pos1.x} {a.pos1.y} {a.pos2.x-a.pos1.x} {a.pos2.y-a.pos1.y}")
            self.area_gdal_coord.set_text(f"{lonmin:.4f} {latmin:.4f} {lonmax:.4f} {latmax:.4f}")

    # Load the image right now so we know about the aspect ratio
    w = MapWidget()
    w.load(args.file)

    info = ImageInfo()
    w.connect("position-changed", info.on_position_changed)
    w.connect("area-changed", info.on_area_changed)

    win = Gtk.Window(title=args.file)
    win.connect('destroy', Gtk.main_quit)
    win.set_size_request(500, 400)

    vbox = Gtk.VBox()
    win.add(vbox)

    toolbar = Gtk.Toolbar()
    tb_zoom_in = Gtk.ToolButton(stock_id=Gtk.STOCK_ZOOM_IN)
    tb_zoom_out = Gtk.ToolButton(stock_id=Gtk.STOCK_ZOOM_OUT)
    toolbar.insert(tb_zoom_in, 0)
    toolbar.insert(tb_zoom_out, 1)
    vbox.pack_start(toolbar, False, False, 0)

    tb_zoom_in.connect("clicked", w.zoom_in)
    tb_zoom_out.connect("clicked", w.zoom_out)

    imgframe = Gtk.Frame(label="Image")
    imgframe.add(w)

    infoframe = Gtk.Frame(label="Info")
    infoframe.add(info)

    box = Gtk.Paned(orientation=Gtk.Orientation.VERTICAL)
    box.pack1(imgframe, True, False)
    box.pack2(infoframe, True, False)
    box.set_position(300)

    vbox.pack_start(box, True, True, 0)

    win.show_all()

    Gtk.main()


def main():
    import argparse

    parser = argparse.ArgumentParser(description="Interactively display a satellite image.")
    parser.add_argument("file", help="file to display")
    args = parser.parse_args()

    start_app(args)


if __name__ == "__main__":
    main()
