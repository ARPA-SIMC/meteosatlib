#!/usr/bin/python3

# Copyright (C) 2010--2012  ARPA-SIM <urpsim@smr.arpa.emr.it>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# Author: Enrico Zini <enrico@enricozini.com>

VERSION="0.3"

def start_app():
    import gdal
    import osr

    import gobject
    import gtk
    from gtk import gdk

    import numpy

    class ImagePosition(object):
        def __init__(self, px, py, lat, lon):
            self.px = px
            self.py = py
            self.lat = lat
            self.lon = lon

    class ImageArea(object):
        def __init__(self, pos1, pos2):
            self.pos1 = pos1
            self.pos2 = pos2

    class MapWidget(gtk.DrawingArea):
        __gsignals__ = {
                "area-changed": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (object,)),
                "position-changed": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (object,)),
        }
        def __init__(self):
            super(MapWidget, self).__init__()
            self.ds = None
            self.rb = None
            self.img = None
            self.refresh_timeout = None

            self.add_events(gdk.POINTER_MOTION_MASK
                          | gdk.BUTTON_PRESS_MASK
                          | gdk.BUTTON_RELEASE_MASK)

            self.rect = None
            self.rect_origin = None
            self.aspect = 1.0
            self.zoom = None

        def load(self, fname):
            self.ds = gdal.Open(fname, gdal.GA_ReadOnly)
            self.rb = self.ds.GetRasterBand(1)
            self.img = None
            self.aspect = self.rb.XSize / self.rb.YSize

            self.proj = osr.SpatialReference()
            self.proj.SetFromUserInput(self.ds.GetProjectionRef())
            self.proj_latlon = self.proj.CloneGeogCS()
            self.to_latlon = osr.CoordinateTransformation(self.proj, self.proj_latlon)
            self.geotrans = self.ds.GetGeoTransform()

            self.paintedsize = None

        def schedule_refresh(self):
            if self.refresh_timeout:
                gobject.source_remove(self.refresh_timeout)
                self.refresh_timeout = None
            self.refresh_timeout = gobject.timeout_add(1000, self.refresh_image)

        def refresh_image(self):
            self.img = None
            self.queue_draw()
            return False

        def enforce_aspect_ratio(self, w, h):
            nh = w / self.aspect
            nw = h * self.aspect
            if nh > h:
                w = nw
            elif nw > w:
                h = nh
            return w, h

        def make_img(self):
            if self.img: return self.img
            x, y, w, h = self.allocation
            w, h = self.enforce_aspect_ratio(w, h)
            print("MAKE", w, h)

            #data = self.ds.ReadRaster(0, 0, self.ds.RasterXSize, self.ds.RasterYSize, w, h, gdal.GDT_Byte)
            if self.zoom:
                data = self.rb.ReadRaster(self.zoom[0], self.zoom[1], self.zoom[2], self.zoom[3], w, h, gdal.GDT_Byte)
            else:
                data = self.rb.ReadRaster(0, 0, self.rb.XSize, self.rb.YSize, w, h, gdal.GDT_Byte)
            arr = numpy.fromstring(data, dtype=numpy.uint8)
            # Normalise image data
            arr_min = arr.min()
            arr_max = arr.max()
            arr = (arr - arr_min) * (arr_max / (arr_max - arr_min))
            print("min", arr_min, "max", arr_max)

            arr = arr.repeat(3)
            arr = arr.reshape((h, w, 3))
            self.img = gdk.pixbuf_new_from_array(arr, gdk.COLORSPACE_RGB, 8)
            return self.img

        def do_size_request(self, requisition):
            # The do_size_request method Gtk+ is calling on a widget to ask
            # it the widget how large it wishes to be. It's not guaranteed
            # that gtk+ will actually give this size to the widget

            # In this case, we say that we want to be as big as the
            # text is, plus a little border around it.
            #width, height = self._layout.get_size()
            w, h = self.enforce_aspect_ratio(requisition.width, requisition.height)

            requisition.width = w #// pango.SCALE + BORDER_WIDTH*4
            requisition.height = h #// pango.SCALE + BORDER_WIDTH*4

        def do_size_allocate(self, allocation):
            # The do_size_allocate is called by when the actual size is known
            # and the widget is told how much space could actually be allocated

            # Save the allocated space
            self.allocation = allocation

            # If we're realized, move and resize the window to the
            # requested coordinates/positions
            if self.flags() & gtk.REALIZED:
                self.window.move_resize(*allocation)
                #self.img = None

        def do_expose_event(self, event):
            # The do_expose_event is called when the widget is asked to draw itself
            # Remember that this will be called a lot of times, so it's usually
            # a good idea to write this code as optimized as it can be, don't
            # Create any resources in here.
            x, y, width, height = self.get_allocation()

            img = self.make_img()
            w, h = self.enforce_aspect_ratio(width, height)
            if img.get_width() != w or img.get_height() != h:
                bigger = img.get_width() < w or img.get_height() < h
                img = img.scale_simple(w, h, gdk.INTERP_NEAREST)
                if bigger:
                    # Only regenerate image if we need more resolution
                    self.schedule_refresh()
            self.paintedsize = (w, h)
            self.window.draw_pixbuf(self.get_style().fg_gc[gtk.STATE_NORMAL],
                    img, 0, 0, 0, 0)

            if self.rect:
                self.window.draw_rectangle(self.get_style().fg_gc[gtk.STATE_NORMAL], False, *self.rect)

        def update_rect(self, event):
            rx = min(self.rect_origin[0], event.x)
            ry = min(self.rect_origin[1], event.y)
            rw = abs(self.rect_origin[0] - event.x)
            rh = abs(self.rect_origin[1] - event.y)
            if rx < 0:
                rw += rx
                rx = 0
            if ry < 0:
                rh += ry
                ry = 0
            if rx + rw >= self.paintedsize[0]:
                rw = self.paintedsize[0] - rx - 1
            if ry + rh >= self.paintedsize[1]:
                rh = self.paintedsize[1] - ry - 1
            self.rect = (int(rx), int(ry), int(rw), int(rh))

            imgx, imgy = self.to_pixel_coords(rx, ry)
            lat, lon = self.georeference(imgx, imgy)
            p1 = ImagePosition(imgx, imgy, lat, lon)
            imgx, imgy = self.to_pixel_coords(rx + rw, ry + rh)
            lat, lon = self.georeference(imgx, imgy)
            p2 = ImagePosition(imgx, imgy, lat, lon)

            self.emit("area-changed", ImageArea(p1, p2))

        def to_pixel_coords(self, x, y):
            if self.zoom:
                ix, iy, iw, ih = self.zoom
            else:
                ix, iy = 0, 0
                iw = self.rb.XSize
                ih = self.rb.YSize
            imgx = ix + (x * iw / self.paintedsize[0]);
            imgy = iy + (y * ih / self.paintedsize[1]);
            if imgx >= self.rb.XSize:
                imgx = self.rb.XSize
            if imgy >= self.rb.YSize:
                imgy = self.rb.YSize
            return imgx, imgy

        def do_motion_notify_event(self, event):
            x, y, w, h = self.allocation

            # Extend rectangle if we are dragging
            if event.state & gdk.BUTTON1_MASK:
                self.update_rect(event)
                self.queue_draw()

            # Convert to image pixels
            imgx, imgy = self.to_pixel_coords(event.x, event.y)
            lat, lon = self.georeference(imgx, imgy)
            #print "(%d, %d) -> lat %f lon %f" % (imgx, imgy, lat, lon)
            self.emit("position-changed", ImagePosition(imgx, imgy, lat, lon))

            # TODO: Georeferentiate
            return False

        def georeference(self, x, y):
            # Pixel coordinates to spaceview projected coordinates
            px = self.geotrans[0] + self.geotrans[1] * x + self.geotrans[2] * y;
            py = self.geotrans[3] + self.geotrans[4] * x + self.geotrans[5] * y;

            # Projected coordinates to latlon
            lon, lat = self.to_latlon.TransformPoint(px, py)[:2]
            return lat, lon

        def do_button_press_event(self, event):
            x = min(self.paintedsize[0]-1, max(0, event.x))
            y = min(self.paintedsize[0]-1, max(0, event.y))
            self.rect = (int(x), int(y), 0, 0)
            self.rect_origin = (int(x), int(y))
            self.queue_draw()
            return False

        def do_button_release_event(self, event):
            if not self.rect: return False
            self.update_rect(event)
            self.queue_draw()
            return False

        def zoom_in(self, *args):
            if self.rect:
                self.img = None
                x1, y1 = self.to_pixel_coords(*self.rect[:2])
                x2, y2 = self.to_pixel_coords(self.rect[0] + self.rect[2], self.rect[1] + self.rect[3])
                self.zoom = (x1, y1, x2-x1, y2-y1)
                self.queue_draw()

        def zoom_out(self, *args):
            if self.zoom:
                self.img = None
                self.zoom = None
                self.queue_draw()

    gobject.type_register(MapWidget)

    class ImageInfo(gtk.VBox):
        def __init__(self):
            super(ImageInfo, self).__init__()
            table = gtk.Table(10, 2)
            table.attach(gtk.Label("Position"), 0, 2, 0, 1)
            table.attach(gtk.Label("Pixels: "), 0, 1, 1, 2)
            self.pos_pix = gtk.Label()
            self.pos_pix.set_selectable(True)
            table.attach(self.pos_pix, 1, 2, 1, 2)
            table.attach(gtk.Label("Coords: "), 0, 1, 2, 3)
            self.pos_coord = gtk.Label()
            self.pos_coord.set_selectable(True)
            table.attach(self.pos_coord, 1, 2, 2, 3)

            table.attach(gtk.Label("Area"), 0, 2, 3, 4)

            table.attach(gtk.Label("Pixels: "), 0, 1, 4, 5)
            self.area_pix = gtk.Label()
            self.area_pix.set_selectable(True)
            table.attach(self.area_pix, 1, 2, 4, 5)
            table.attach(gtk.Label("Coords: "), 0, 1, 5, 6)
            self.area_coord = gtk.Label()
            self.area_coord.set_selectable(True)
            table.attach(self.area_coord, 1, 2, 5, 6)

            table.attach(gtk.Label("msat pix: "), 0, 1, 6, 7)
            self.area_msat_pix = gtk.Label()
            self.area_msat_pix.set_selectable(True)
            table.attach(self.area_msat_pix, 1, 2, 6, 7)
            table.attach(gtk.Label("msat coord: "), 0, 1, 7, 8)
            self.area_msat_coord = gtk.Label()
            self.area_msat_coord.set_selectable(True)
            table.attach(self.area_msat_coord, 1, 2, 7, 8)

            self.pack_start(table, False, True)
            table.attach(gtk.Label("GDAL pix: "), 0, 1, 8, 9)
            self.area_gdal_pix = gtk.Label()
            self.area_gdal_pix.set_selectable(True)
            table.attach(self.area_gdal_pix, 1, 2, 8, 9)
            table.attach(gtk.Label("GDAL coord: "), 0, 1, 10, 11)
            self.area_gdal_coord = gtk.Label()
            self.area_gdal_coord.set_selectable(True)
            table.attach(self.area_gdal_coord, 1, 2, 10, 11)

            self.pack_start(table, False, True)

        def fmtll(self, lat, lon):
            if abs(lat) > 90:
                slat = "--"
            else:
                slat = "%.4f" % lat
            if abs(lon) > 180:
                slon = "--"
            else:
                slon = "%.4f" % lon
            return "%s %s" % (slat, slon)

        def on_position_changed(self, mapview, pos):
            self.pos_pix.set_text("%d, %d" % (pos.px, pos.py))
            self.pos_coord.set_text(self.fmtll(pos.lat, pos.lon))

        def on_area_changed(self, mapview, a):
            self.area_pix.set_text("%d, %d to %d, %d" % (a.pos1.px, a.pos1.py, a.pos2.px, a.pos2.py))
            self.area_coord.set_text("%s\n%s" % (self.fmtll(a.pos1.lat, a.pos1.lon), self.fmtll(a.pos2.lat, a.pos2.lon)))
            latmin = min(a.pos1.lat, a.pos2.lat)
            latmax = max(a.pos1.lat, a.pos2.lat)
            lonmin = min(a.pos1.lon, a.pos2.lon)
            lonmax = max(a.pos1.lon, a.pos2.lon)
            self.area_msat_pix.set_text("--area='%d,%d,%d,%d'" % (a.pos1.px, a.pos2.px-a.pos1.px, a.pos1.py, a.pos2.py-a.pos1.py))
            self.area_msat_coord.set_text("--Area='%.4f %.4f %.4f %.4f" % (latmin, latmax, lonmin, lonmax))
            self.area_gdal_pix.set_text("%d %d %d %d" % (a.pos1.px, a.pos1.py, a.pos2.px-a.pos1.px, a.pos2.py-a.pos1.py))
            self.area_gdal_coord.set_text("%.4f %.4f %.4f %.4f" % (lonmin, latmin, lonmax, latmax))

    # Load the image right now so we know about the aspect ratio
    w = MapWidget()
    w.load(sys.argv[1])

    info = ImageInfo()
    w.connect("position-changed", info.on_position_changed)
    w.connect("area-changed", info.on_area_changed)

    win = gtk.Window()
    win.set_title(sys.argv[1])
    win.connect('delete-event', gtk.main_quit)
    win.set_size_request(500, 400)

    vbox = gtk.VBox()
    win.add(vbox)

    toolbar = gtk.Toolbar()
    tb_zoom_in = gtk.ToolButton(gtk.STOCK_ZOOM_IN)
    tb_zoom_out = gtk.ToolButton(gtk.STOCK_ZOOM_OUT)
    toolbar.insert(tb_zoom_in, 0)
    toolbar.insert(tb_zoom_out, 1)
    vbox.pack_start(toolbar, False, False)

    tb_zoom_in.connect("clicked", w.zoom_in)
    tb_zoom_out.connect("clicked", w.zoom_out)

    imgframe = gtk.Frame("Image")
    imgframe.add(w)

    infoframe = gtk.Frame("Info")
    infoframe.add(info)

    box = gtk.VPaned()
    box.pack1(imgframe, True, False)
    box.pack2(infoframe, True, False)
    box.set_position(300)

    vbox.pack_start(box, True, True)

    win.show_all()

    gtk.main()


if __name__ == "__main__":
    import sys
    from optparse import OptionParser

    class Parser(OptionParser):
        "Command line parser"
        def __init__(self, *args, **kwargs):
            OptionParser.__init__(self, *args, **kwargs)

        def error(self, msg):
            sys.stderr.write("%s: error: %s\n\n" % (self.get_prog_name(), msg))
            self.print_help(sys.stderr)
            sys.exit(2)

    parser = Parser(usage="usage: %prog [options] file",
                    version="%prog "+ VERSION,
                    description="Interactively display a satellite image.")

    (opts, args) = parser.parse_args()

    start_app()
